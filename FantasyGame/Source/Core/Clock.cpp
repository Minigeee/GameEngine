#include <Core/Clock.h>

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#ifdef WIN32

#include <Windows.h>

LARGE_INTEGER GetFrequency()
{
	LARGE_INTEGER freq;
	QueryPerformanceFrequency(&freq);
	return freq;
}

Uint64 ClockImpl()
{
	// Frequency of performance counter
	static LARGE_INTEGER freq = GetFrequency();

	LARGE_INTEGER time;
	QueryPerformanceCounter(&time);

	// Return as microseconds
	return 1000000 * time.QuadPart / freq.QuadPart;
}

#endif

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Clock::Clock() :
	mStartTime		(ClockImpl())
{

}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

float Clock::GetElapsedTime() const
{
	return (ClockImpl() - mStartTime) / 1000000.0f;
}

///////////////////////////////////////////////////////////////////////////////

float Clock::Restart()
{
	Uint64 now = ClockImpl();
	Uint64 elapsed = now = mStartTime;
	mStartTime = now;

	return elapsed / 1000000.0f;
}

///////////////////////////////////////////////////////////////////////////////