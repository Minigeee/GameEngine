#include <Core/Thread.h>

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Thread::Thread() :
	mIsActive		(false)
{

}

Thread::~Thread()
{
	Join();
}

///////////////////////////////////////////////////////////////////////////////

void Thread::Join()
{
	if (mIsActive)
	{
		mThread.join();
		mIsActive = false;
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Mutex::Mutex()
{

}

Mutex::~Mutex()
{

}

///////////////////////////////////////////////////////////////////////////////

void Mutex::Lock()
{
	mMutex.lock();
}

void Mutex::Unlock()
{
	mMutex.unlock();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Lock::Lock(Mutex& mutex) :
	mMutex(mutex)
{
	mMutex.Lock();
}

Lock::~Lock()
{
	mMutex.Unlock();
}

///////////////////////////////////////////////////////////////////////////////